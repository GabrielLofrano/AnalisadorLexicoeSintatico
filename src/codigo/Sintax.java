
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 30 14:30:57 BRT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 30 14:30:57 BRT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\017\000\002\002" +
    "\024\000\002\004\007\000\002\004\010\000\002\004\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\007\000\002" +
    "\006\003\000\002\006\005\000\002\006\010\000\002\006" +
    "\006\000\002\006\011\000\002\006\013\000\002\007\005" +
    "\000\002\007\006\000\002\003\004\000\002\003\002\000" +
    "\002\036\011\000\002\036\014\000\002\010\006\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\040\005\000\002\040\005\000" +
    "\002\034\005\000\002\025\005\000\002\027\005\000\002" +
    "\030\005\000\002\026\005\000\002\031\007\000\002\031" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\002\000\002\013\003\000\002\013\003\000\002\014\022" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\014\000\002\017\011\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\006\000\002\021\006\000\002\033\005\000\002" +
    "\033\005\000\002\033\002\000\002\022\014\000\002\032" +
    "\020\000\002\037\010\000\002\037\003\000\002\023\007" +
    "\000\002\024\007\000\002\024\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\021\010\001\002\000\006\004\012\007\011\001" +
    "\002\000\004\017\327\001\002\000\004\006\013\001\002" +
    "\000\004\055\014\001\002\000\004\057\015\001\002\000" +
    "\006\004\017\007\ufffc\001\002\000\004\007\027\001\002" +
    "\000\004\006\020\001\002\000\004\055\021\001\002\000" +
    "\006\040\023\057\022\001\002\000\006\004\017\007\ufffc" +
    "\001\002\000\004\057\024\001\002\000\006\004\017\007" +
    "\ufffc\001\002\000\004\007\ufffd\001\002\000\004\007\ufffe" +
    "\001\002\000\004\017\030\001\002\000\004\031\031\001" +
    "\002\000\004\032\032\001\002\000\004\035\033\001\002" +
    "\000\014\007\034\010\036\011\037\015\040\020\uffec\001" +
    "\002\000\006\041\ufffb\055\ufffb\001\002\000\004\020\323" +
    "\001\002\000\006\041\ufffa\055\ufffa\001\002\000\006\041" +
    "\ufff9\055\ufff9\001\002\000\006\041\ufff8\055\ufff8\001\002" +
    "\000\020\012\112\014\107\016\102\020\uffcb\022\106\023" +
    "\105\055\104\001\002\000\006\041\044\055\043\001\002" +
    "\000\012\032\ufff5\033\054\053\055\054\ufff5\001\002\000" +
    "\004\055\050\001\002\000\004\054\046\001\002\000\030" +
    "\007\034\010\036\011\037\012\uffef\014\uffef\015\040\016" +
    "\uffef\020\uffef\022\uffef\023\uffef\055\uffef\001\002\000\020" +
    "\012\uffee\014\uffee\016\uffee\020\uffee\022\uffee\023\uffee\055" +
    "\uffee\001\002\000\004\041\051\001\002\000\010\032\ufff4" +
    "\053\052\054\ufff4\001\002\000\006\041\044\055\043\001" +
    "\002\000\006\032\ufff6\054\ufff6\001\002\000\006\055\060" +
    "\057\057\001\002\000\006\041\044\055\043\001\002\000" +
    "\006\032\ufff7\054\ufff7\001\002\000\042\024\uffb8\027\uffb8" +
    "\030\uffb8\032\uffb8\034\uffb8\037\uffb8\040\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\054\uffb8\001\002\000\044\024\uffb9\027\uffb9\030\uffb9\032" +
    "\uffb9\033\072\034\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\054" +
    "\uffb9\001\002\000\004\034\062\001\002\000\012\032\ufff2" +
    "\033\063\053\064\054\ufff2\001\002\000\006\055\060\057" +
    "\057\001\002\000\006\041\044\055\043\001\002\000\006" +
    "\032\ufff3\054\ufff3\001\002\000\004\034\067\001\002\000" +
    "\010\032\ufff1\053\070\054\ufff1\001\002\000\006\041\044" +
    "\055\043\001\002\000\006\032\ufff0\054\ufff0\001\002\000" +
    "\006\055\074\057\073\001\002\000\004\034\076\001\002" +
    "\000\004\034\075\001\002\000\042\024\uffb7\027\uffb7\030" +
    "\uffb7\032\uffb7\034\uffb7\037\uffb7\040\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\054" +
    "\uffb7\001\002\000\042\024\uffb6\027\uffb6\030\uffb6\032\uffb6" +
    "\034\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\001\002" +
    "\000\022\012\uffc9\014\uffc9\016\uffc9\020\uffc9\022\uffc9\023" +
    "\uffc9\036\uffc9\055\uffc9\001\002\000\022\012\112\014\107" +
    "\016\102\020\uffcb\022\106\023\105\036\uffcb\055\104\001" +
    "\002\000\022\012\uffca\014\uffca\016\uffca\020\uffca\022\uffca" +
    "\023\uffca\036\uffca\055\uffca\001\002\000\004\031\313\001" +
    "\002\000\004\020\uffed\001\002\000\006\033\241\047\242" +
    "\001\002\000\004\031\214\001\002\000\004\031\176\001" +
    "\002\000\004\031\172\001\002\000\022\012\112\014\107" +
    "\016\102\020\uffcb\022\106\023\105\036\uffcb\055\104\001" +
    "\002\000\022\012\112\014\107\016\102\020\uffcb\022\106" +
    "\023\105\036\uffcb\055\104\001\002\000\004\031\123\001" +
    "\002\000\022\012\112\014\107\016\102\020\uffcb\022\106" +
    "\023\105\036\uffcb\055\104\001\002\000\022\012\112\014" +
    "\107\016\102\020\uffcb\022\106\023\105\036\uffcb\055\104" +
    "\001\002\000\022\012\112\014\107\016\102\020\uffcb\022" +
    "\106\023\105\036\uffcb\055\104\001\002\000\022\012\112" +
    "\014\107\016\102\020\uffcb\022\106\023\105\036\uffcb\055" +
    "\104\001\002\000\006\020\uffcc\036\uffcc\001\002\000\006" +
    "\020\uffd0\036\uffd0\001\002\000\006\020\uffd2\036\uffd2\001" +
    "\002\000\006\020\uffcf\036\uffcf\001\002\000\006\055\060" +
    "\057\057\001\002\000\022\024\125\027\126\030\uffb3\045" +
    "\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\001\002\000\006" +
    "\055\060\057\057\001\002\000\006\055\060\057\057\001" +
    "\002\000\016\030\131\045\132\046\130\050\135\051\133" +
    "\052\136\001\002\000\010\031\uffbb\055\uffbb\057\uffbb\001" +
    "\002\000\010\031\uffbd\055\uffbd\057\uffbd\001\002\000\010" +
    "\031\uffba\055\uffba\057\uffba\001\002\000\010\031\uffbf\055" +
    "\uffbf\057\uffbf\001\002\000\010\031\137\055\060\057\057" +
    "\001\002\000\010\031\uffbc\055\uffbc\057\uffbc\001\002\000" +
    "\010\031\uffbe\055\uffbe\057\uffbe\001\002\000\006\055\060" +
    "\057\057\001\002\000\004\032\142\001\002\000\004\032" +
    "\uffaf\001\002\000\004\035\143\001\002\000\020\012\112" +
    "\014\107\016\102\022\106\023\105\036\uffcb\055\104\001" +
    "\002\000\004\036\145\001\002\000\024\012\uffb2\013\146" +
    "\014\uffb2\016\uffb2\020\uffb2\022\uffb2\023\uffb2\036\uffb2\055" +
    "\uffb2\001\002\000\004\035\147\001\002\000\020\012\112" +
    "\014\107\016\102\022\106\023\105\036\uffcb\055\104\001" +
    "\002\000\004\036\151\001\002\000\022\012\uffb1\014\uffb1" +
    "\016\uffb1\020\uffb1\022\uffb1\023\uffb1\036\uffb1\055\uffb1\001" +
    "\002\000\020\024\125\027\126\037\uffb3\040\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\001\002\000\014\037\155\040\154\042" +
    "\157\043\161\044\156\001\002\000\010\031\uffd6\055\uffd6" +
    "\057\uffd6\001\002\000\010\031\uffd7\055\uffd7\057\uffd7\001" +
    "\002\000\010\031\uffd4\055\uffd4\057\uffd4\001\002\000\010" +
    "\031\uffd5\055\uffd5\057\uffd5\001\002\000\010\031\137\055" +
    "\060\057\057\001\002\000\010\031\uffd3\055\uffd3\057\uffd3" +
    "\001\002\000\004\032\163\001\002\000\004\032\uffb0\001" +
    "\002\000\034\024\125\027\126\030\uffb3\037\uffb3\040\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\001\002\000\030\030\uffb5\037\uffb5\040\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\001\002\000\034\024\125\027\126\030\uffb3" +
    "\037\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\001\002\000\030\030\uffb4" +
    "\037\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\001\002\000\006\020\uffd1" +
    "\036\uffd1\001\002\000\006\020\uffcd\036\uffcd\001\002\000" +
    "\004\055\173\001\002\000\004\032\174\001\002\000\004" +
    "\054\175\001\002\000\022\012\uffae\014\uffae\016\uffae\020" +
    "\uffae\022\uffae\023\uffae\036\uffae\055\uffae\001\002\000\006" +
    "\055\177\057\057\001\002\000\026\024\uffb9\027\uffb9\030" +
    "\uffb9\032\210\033\072\045\uffb9\046\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\001\002\000\022\024\125\027\126\030\uffb3\045" +
    "\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\001\002\000\016" +
    "\030\131\045\132\046\130\050\135\051\133\052\136\001" +
    "\002\000\006\055\060\057\057\001\002\000\004\032\204" +
    "\001\002\000\004\035\205\001\002\000\020\012\112\014" +
    "\107\016\102\022\106\023\105\036\uffcb\055\104\001\002" +
    "\000\004\036\207\001\002\000\022\012\uffc1\014\uffc1\016" +
    "\uffc1\020\uffc1\022\uffc1\023\uffc1\036\uffc1\055\uffc1\001\002" +
    "\000\004\035\211\001\002\000\020\012\112\014\107\016" +
    "\102\022\106\023\105\036\uffcb\055\104\001\002\000\004" +
    "\036\213\001\002\000\022\012\uffc0\014\uffc0\016\uffc0\020" +
    "\uffc0\022\uffc0\023\uffc0\036\uffc0\055\uffc0\001\002\000\004" +
    "\055\215\001\002\000\004\047\216\001\002\000\006\055" +
    "\060\057\057\001\002\000\004\054\220\001\002\000\004" +
    "\055\221\001\002\000\012\045\223\046\222\051\224\052" +
    "\226\001\002\000\006\055\uffc5\057\uffc5\001\002\000\006" +
    "\055\uffc4\057\uffc4\001\002\000\006\055\uffc7\057\uffc7\001" +
    "\002\000\006\055\060\057\057\001\002\000\006\055\uffc6" +
    "\057\uffc6\001\002\000\004\054\230\001\002\000\004\055" +
    "\231\001\002\000\006\025\232\026\233\001\002\000\004" +
    "\032\uffc3\001\002\000\004\032\uffc2\001\002\000\004\032" +
    "\235\001\002\000\004\035\236\001\002\000\020\012\112" +
    "\014\107\016\102\022\106\023\105\036\uffcb\055\104\001" +
    "\002\000\004\036\240\001\002\000\022\012\uffc8\014\uffc8" +
    "\016\uffc8\020\uffc8\022\uffc8\023\uffc8\036\uffc8\055\uffc8\001" +
    "\002\000\006\055\060\057\057\001\002\000\010\031\254" +
    "\055\060\057\057\001\002\000\006\032\uffe1\054\uffe1\001" +
    "\002\000\006\032\uffe2\054\uffe2\001\002\000\006\032\uffe4" +
    "\054\uffe4\001\002\000\006\032\uffe6\054\uffe6\001\002\000" +
    "\006\032\uffe7\054\uffe7\001\002\000\006\032\uffe5\054\uffe5" +
    "\001\002\000\004\054\277\001\002\000\006\032\uffe8\054" +
    "\uffe8\001\002\000\024\024\266\027\265\032\uffe3\037\262" +
    "\040\261\042\264\043\267\044\263\054\uffe3\001\002\000" +
    "\010\031\254\055\060\057\057\001\002\000\004\032\256" +
    "\001\002\000\020\032\uffd8\037\155\040\154\042\157\043" +
    "\161\044\156\054\uffd8\001\002\000\010\031\254\055\060" +
    "\057\057\001\002\000\006\032\uffd9\054\uffd9\001\002\000" +
    "\010\031\254\055\060\057\057\001\002\000\010\031\254" +
    "\055\060\057\057\001\002\000\010\031\254\055\060\057" +
    "\057\001\002\000\010\031\254\055\060\057\057\001\002" +
    "\000\010\031\254\055\060\057\057\001\002\000\010\031" +
    "\254\055\060\057\057\001\002\000\010\031\254\055\060" +
    "\057\057\001\002\000\006\032\uffde\054\uffde\001\002\000" +
    "\006\032\uffdf\054\uffdf\001\002\000\006\032\uffe0\054\uffe0" +
    "\001\002\000\006\032\uffda\054\uffda\001\002\000\006\032" +
    "\uffdb\054\uffdb\001\002\000\006\032\uffdd\054\uffdd\001\002" +
    "\000\006\032\uffdc\054\uffdc\001\002\000\022\012\uffe9\014" +
    "\uffe9\016\uffe9\020\uffe9\022\uffe9\023\uffe9\036\uffe9\055\uffe9" +
    "\001\002\000\004\034\301\001\002\000\006\033\302\047" +
    "\303\001\002\000\006\055\060\057\057\001\002\000\010" +
    "\031\254\055\060\057\057\001\002\000\004\054\305\001" +
    "\002\000\022\012\uffeb\014\uffeb\016\uffeb\020\uffeb\022\uffeb" +
    "\023\uffeb\036\uffeb\055\uffeb\001\002\000\004\034\307\001" +
    "\002\000\004\047\310\001\002\000\010\031\254\055\060" +
    "\057\057\001\002\000\004\054\312\001\002\000\022\012" +
    "\uffea\014\uffea\016\uffea\020\uffea\022\uffea\023\uffea\036\uffea" +
    "\055\uffea\001\002\000\010\041\044\055\043\056\314\001" +
    "\002\000\004\032\320\001\002\000\004\032\316\001\002" +
    "\000\004\054\317\001\002\000\022\012\uffac\014\uffac\016" +
    "\uffac\020\uffac\022\uffac\023\uffac\036\uffac\055\uffac\001\002" +
    "\000\004\054\321\001\002\000\022\012\uffad\014\uffad\016" +
    "\uffad\020\uffad\022\uffad\023\uffad\036\uffad\055\uffad\001\002" +
    "\000\006\020\uffce\036\uffce\001\002\000\004\057\324\001" +
    "\002\000\004\054\325\001\002\000\004\036\326\001\002" +
    "\000\004\002\uffff\001\002\000\004\031\330\001\002\000" +
    "\004\032\331\001\002\000\004\035\332\001\002\000\014" +
    "\007\034\010\036\011\037\015\040\020\uffec\001\002\000" +
    "\004\020\334\001\002\000\004\057\335\001\002\000\004" +
    "\054\336\001\002\000\004\036\337\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\025\001\001\000\002\001\001\000\004" +
    "\004\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\034\005\041\007\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\077\012\102\013" +
    "\113\014\100\017\076\022\110\023\114\024\112\032\107" +
    "\036\115\001\001\000\004\006\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\041" +
    "\007\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\052\001\001\000\002\001\001" +
    "\000\004\021\060\001\001\000\004\006\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\065\001\001\000" +
    "\004\006\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\010\077\012\321\013\113\014\100\017\076\022\110" +
    "\023\114\024\112\032\107\036\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\010\077\012\170\013\113\014\100\017\076\022\110" +
    "\023\114\024\112\032\107\036\115\001\001\000\026\010" +
    "\077\012\167\013\113\014\100\017\076\022\110\023\114" +
    "\024\112\032\107\036\115\001\001\000\002\001\001\000" +
    "\026\010\077\012\121\013\113\014\100\017\076\022\110" +
    "\023\114\024\112\032\107\036\115\001\001\000\026\010" +
    "\077\012\120\013\113\014\100\017\076\022\110\023\114" +
    "\024\112\032\107\036\115\001\001\000\026\010\077\012" +
    "\117\013\113\014\100\017\076\022\110\023\114\024\112" +
    "\032\107\036\115\001\001\000\026\010\077\012\116\013" +
    "\113\014\100\017\076\022\110\023\114\024\112\032\107" +
    "\036\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\123\001\001" +
    "\000\004\033\126\001\001\000\004\021\165\001\001\000" +
    "\004\021\163\001\001\000\004\020\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\140\037\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\077" +
    "\012\143\013\113\014\100\017\076\022\110\023\114\024" +
    "\112\032\107\036\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\077\012\147\013" +
    "\113\014\100\017\076\022\110\023\114\024\112\032\107" +
    "\036\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\152\001\001\000\004\035\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\140\037\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\164\001" +
    "\001\000\002\001\001\000\004\033\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\177\001\001\000\002\001\001\000\004\033" +
    "\200\001\001\000\004\020\201\001\001\000\004\021\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\077\012\205\013\113\014\100\017\076\022\110\023\114" +
    "\024\112\032\107\036\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\010\077\012\211" +
    "\013\113\014\100\017\076\022\110\023\114\024\112\032" +
    "\107\036\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\077\012\236\013\113\014\100\017" +
    "\076\022\110\023\114\024\112\032\107\036\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\277\001" +
    "\001\000\024\011\250\021\252\025\251\026\247\027\246" +
    "\030\245\031\244\034\243\040\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\254\021\252" +
    "\025\251\026\247\027\246\030\245\031\244\034\243\040" +
    "\242\001\001\000\002\001\001\000\004\035\256\001\001" +
    "\000\024\011\257\021\252\025\251\026\247\027\246\030" +
    "\245\031\244\034\243\040\242\001\001\000\002\001\001" +
    "\000\024\011\275\021\252\025\251\026\247\027\246\030" +
    "\245\031\244\034\243\040\242\001\001\000\024\011\274" +
    "\021\252\025\251\026\247\027\246\030\245\031\244\034" +
    "\243\040\242\001\001\000\024\011\273\021\252\025\251" +
    "\026\247\027\246\030\245\031\244\034\243\040\242\001" +
    "\001\000\024\011\272\021\252\025\251\026\247\027\246" +
    "\030\245\031\244\034\243\040\242\001\001\000\024\011" +
    "\271\021\252\025\251\026\247\027\246\030\245\031\244" +
    "\034\243\040\242\001\001\000\024\011\270\021\252\025" +
    "\251\026\247\027\246\030\245\031\244\034\243\040\242" +
    "\001\001\000\024\011\267\021\252\025\251\026\247\027" +
    "\246\030\245\031\244\034\243\040\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\305\001\001\000\024\011\303\021\252\025\251" +
    "\026\247\027\246\030\245\031\244\034\243\040\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\310\021\252\025\251\026" +
    "\247\027\246\030\245\031\244\034\243\040\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\332\005\041\007\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IMPRIMIR ::= Imprimir AbreP LISTAIDS FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IMPRIMIR ::= Imprimir AbreP Literal FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LER ::= Ler AbreP Id FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LER",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARENTES_IF ::= VARIAVEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTES_IF",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARENTES_IF ::= AbreP VARIAVEL JUNCAO ARITMETICAS PARENTES_IF FechaP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTES_IF",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_ELSE ::= Se AbreP VARIAVEL JUNCAO COMPARACAO PARENTES_IF FechaP AbreCH COMANDOS FechaCH Senao AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= Se AbreP VARIAVEL JUNCAO COMPARACAO PARENTES_IF FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // JUNCAO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JUNCAO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // JUNCAO ::= Uniao VARIAVEL JUNCAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JUNCAO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // JUNCAO ::= Ou VARIAVEL JUNCAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JUNCAO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARIAVEL ::= Id AbreCO Numero FechaCO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIAVEL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARIAVEL ::= Id AbreCO Id FechaCO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIAVEL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIAVEL ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIAVEL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIAVEL ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIAVEL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COMPARACAO ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACAO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COMPARACAO ::= Maior 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACAO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COMPARACAO ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACAO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMPARACAO ::= Equivalente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACAO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMPARACAO ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACAO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMPARACAO ::= MaiorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACAO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= Enquanto AbreP Id FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= Enquanto AbreP VARIAVEL JUNCAO COMPARACAO VARIAVEL FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MM ::= MenosMenos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MM ::= MaisMais 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MI ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MI",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MI ::= Maior 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MI",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MI ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MI",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MI ::= MaiorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MI",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= Para AbreP Id Igual VARIAVEL Pv Id MI VARIAVEL Pv Id MM FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // REPETICAO ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // REPETICAO ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMANDOS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMANDOS ::= ATRIBUICAO_VET COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMANDOS ::= IF_ELSE COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMANDOS ::= ATRIBUICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMANDOS ::= IMPRIMIR COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMANDOS ::= LER COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMANDOS ::= IF COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMANDOS ::= REPETICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARITMETICAS ::= Porcentagem 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARITMETICAS ::= Multiplicacao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARITMETICAS ::= Divisao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARITMETICAS ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARITMETICAS ::= Mais 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARENTES ::= AbreP EXPRESSAO FechaP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARENTES ::= AbreP EXPRESSAO FechaP ARITMETICAS EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DIVISAO ::= VARIAVEL Divisao EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIVISAO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MULTIPLICACAO ::= VARIAVEL Multiplicacao EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULTIPLICACAO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SUBTRACAO ::= VARIAVEL Menos EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUBTRACAO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SOMA ::= VARIAVEL Mais EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SOMA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PORCENTAGEM ::= VARIAVEL Porcentagem EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PORCENTAGEM",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // JUNCAO_EX ::= VARIAVEL Uniao EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JUNCAO_EX",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // JUNCAO_EX ::= VARIAVEL Ou EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JUNCAO_EX",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESSAO ::= JUNCAO_EX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESSAO ::= PORCENTAGEM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESSAO ::= VARIAVEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESSAO ::= PARENTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESSAO ::= DIVISAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESSAO ::= MULTIPLICACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESSAO ::= SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESSAO ::= SOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIBUICAO ::= Id Igual EXPRESSAO Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIBUICAO_VET ::= Id AbreCO VARIAVEL FechaCO AbreCO VARIAVEL FechaCO Igual EXPRESSAO Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO_VET",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATRIBUICAO_VET ::= Id AbreCO VARIAVEL FechaCO Igual EXPRESSAO Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO_VET",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMANDO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMANDO ::= DECLARACAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACAO ::= TIPO LISTAIDS Pv DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACAO ::= TIPO LISTAIDS Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTAIDS ::= Id AbreCO VARIAVEL FechaCO AbreCO VARIAVEL FechaCO Virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTAIDS ::= Id AbreCO VARIAVEL FechaCO AbreCO VARIAVEL FechaCO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAIDS ::= Id AbreCO VARIAVEL FechaCO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAIDS ::= Id AbreCO VARIAVEL FechaCO Virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTAIDS ::= AspasD Id AspasD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTAIDS ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTAIDS ::= AspasD Id AspasD Virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTAIDS ::= Id Virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= Caractere 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= Inteiro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAISCONST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAISCONST ::= Hash Const Id Menos Numero MAISCONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAISCONST ::= Hash Const Id Numero MAISCONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Hash Include Lib Hash Const Id Numero MAISCONST Inteiro Principal AbreP FechaP AbreCH COMANDO Retorna Numero Pv FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Hash Include Lib Inteiro Principal AbreP FechaP AbreCH COMANDO Retorna Numero Pv FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

